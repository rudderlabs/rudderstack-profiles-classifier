
# Generated by CodiumAI
from SnowflakeConnector import SnowflakeConnector
import pandas as pd
from unittest.mock import Mock
import unittest
from snowflake.snowpark import Session
import snowflake.snowpark.types as T


class TestLabelTable(unittest.TestCase):
    def setUp(self) -> None:
        self.session = Session.builder.config('local_testing', True).create()
        self.connector = SnowflakeConnector()
        df = pd.DataFrame.from_dict({"COL1": ["2021-01-01 00:00:00", "2021-01-01 00:00:00"], 
                                     "COL2": ["value1", "value2"],
                                     "COL3": ["2021-01-01", "2021-01-01"],
                                     "COL4": ["2021-01-01 00:00:00+00:00", "2021-01-01 00:00:00+00:00"],}
                                    )
        self.table = self.session.create_dataframe(df)        
    
    def test_label_table_returns_only_required_cols(self):
        self.connector.get_table = Mock(return_value=self.table)
        label_column = "COL2"
        entity_column = "COL3"
        positive_class = "value1"
        actual = self.connector.label_table(self.session, 
                                            None, 
                                            label_column,
                                            entity_column, 
                                            positive_class)
        self.assertListEqual(actual.columns, [entity_column, label_column])
    def test_label_table_changes_label_value_for_classification(self):
        self.connector.get_table = Mock(return_value=self.table)
        label_column = "COL2"
        entity_column = "COL3"
        positive_class = "value1"
        actual = self.connector.label_table(self.session, 
                                            None, 
                                            label_column,
                                            entity_column, 
                                            positive_class)
        actual_label_col_vals = [v.as_dict()[label_column] for v in actual.collect()]
        expected_label_col_vals = [1, 0]
        self.assertListEqual(actual_label_col_vals, expected_label_col_vals)        
    def test_label_table_does_not_change_label_value_for_regression(self):
        self.connector.get_table = Mock(return_value=self.table)
        label_column = "COL2"
        entity_column = "COL3"
        actual = self.connector.label_table(self.session, 
                                            None, 
                                            label_column,
                                            entity_column, 
                                            None
                                            )
        actual_label_col_vals = [v.as_dict()[label_column] for v in actual.collect()]
        expected_label_col_vals = ["value1", "value2"]
        self.assertListEqual(actual_label_col_vals, expected_label_col_vals)        
        
class TestSelectRelevantColumns(unittest.TestCase):
    def setUp(self) -> None:
        self.session = Session.builder.config('local_testing', True).create()
        self.connector = SnowflakeConnector()
        df = pd.DataFrame.from_dict({"COL1": ['a','b'], 
                                     "COL2": [1,2],
                                     "COL3": [None, None],
                                     "COL4": ['a1','b1'],}
                                    )
        self.table = self.session.create_dataframe(df)       

    # Returns a pandas DataFrame with only the columns specified in the training_features_columns dictionary.
    def test_relevant_columns_only(self):
        training_features_columns = {'features': ['COL1', 'COL2'], 'timestamp_columns': ['COL3']}
        relevant_columns = self.connector.select_relevant_columns(self.table, training_features_columns)
        expected_columns = ['COL1', 'COL2', "COL3"]
        self.assertEqual(list(relevant_columns.columns), expected_columns)
        
    # Throws an exception that the expected column is not found
    def test_relevant_columns_not_found(self):
        training_features_columns = {'features': ['COL1', 'COL2'], 'timestamp_columns': ['COL5']}
        with self.assertRaises(Exception) as context:
            self.connector.select_relevant_columns(self.table, training_features_columns)
        self.assertIn('Expected feature column COL5 not found in the predictions input table', str(context.exception))        