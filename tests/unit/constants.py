# Generated by CodiumAI

import unittest
from src.predictions.profiles_mlcorelib.utils.constants import TrainTablesInfo


class TestTrainTablesInfo(unittest.TestCase):
    # TrainTablesInfo can be instantiated with valid arguments
    def test_instantiation_with_valid_arguments(self):
        # Arrange
        feature_table_name = "feature_table"
        feature_table_date = 20220101
        label_table_name = "label_table"
        label_table_date = 20220101

        # Act
        train_tables_info = TrainTablesInfo(
            feature_table_name, feature_table_date, label_table_name, label_table_date
        )

        # Assert
        self.assertEqual(train_tables_info.feature_table_name, feature_table_name)
        self.assertEqual(train_tables_info.feature_table_date, feature_table_date)
        self.assertEqual(train_tables_info.label_table_name, label_table_name)
        self.assertEqual(train_tables_info.label_table_date, label_table_date)

    # TrainTablesInfo instances are immutable
    def test_immutable_instances(self):
        # Arrange
        feature_table_name = "feature_table"
        feature_table_date = 20220101
        label_table_name = "label_table"
        label_table_date = 20220101
        train_tables_info = TrainTablesInfo(
            feature_table_name, feature_table_date, label_table_name, label_table_date
        )

        # Act
        with self.assertRaises(AttributeError):
            train_tables_info.feature_table_name = "new_feature_table"

        with self.assertRaises(AttributeError):
            train_tables_info.feature_table_date = 20220102

        with self.assertRaises(AttributeError):
            train_tables_info.label_table_name = "new_label_table"

        with self.assertRaises(AttributeError):
            train_tables_info.label_table_date = 20220102

        # Assert
        self.assertEqual(train_tables_info.feature_table_name, feature_table_name)
        self.assertEqual(train_tables_info.feature_table_date, feature_table_date)
        self.assertEqual(train_tables_info.label_table_name, label_table_name)
        self.assertEqual(train_tables_info.label_table_date, label_table_date)

    # TrainTablesInfo instances can be compared for equality
    def test_equality_comparison(self):
        # Arrange
        feature_table_name = "feature_table"
        feature_table_date = 20220101
        label_table_name = "label_table"
        label_table_date = 20220101
        train_tables_info_1 = TrainTablesInfo(
            feature_table_name, feature_table_date, label_table_name, label_table_date
        )
        train_tables_info_2 = TrainTablesInfo(
            feature_table_name, feature_table_date, label_table_name, label_table_date
        )

        # Act
        are_equal = train_tables_info_1 == train_tables_info_2

        # Assert
        self.assertTrue(are_equal)

    # TrainTablesInfo instances with the same values for different attributes are not equal
    def test_inequality_comparison(self):
        # Arrange
        feature_table_name = "feature_table"
        feature_table_date = 20220101
        label_table_name = "label_table"
        label_table_date = 20220101
        train_tables_info_1 = TrainTablesInfo(
            feature_table_name, feature_table_date, label_table_name, label_table_date
        )
        train_tables_info_2 = TrainTablesInfo(
            label_table_name, label_table_date, feature_table_name, feature_table_date
        )

        # Act
        are_equal = train_tables_info_1 == train_tables_info_2

        # Assert
        self.assertFalse(are_equal)

    # TrainTablesInfo once deserialised from json and serialised back should give a list which can be used to recreate the original object
    def test_serialisation(self):
        feature_table_name = "feature_table"
        feature_table_date = 20220101
        label_table_name = "label_table"
        label_table_date = 20220101
        train_tables_info = TrainTablesInfo(
            feature_table_name, feature_table_date, label_table_name, label_table_date
        )
        import json

        # serialisation
        json_string = json.dumps(train_tables_info)
        deserialised = json.loads(json_string)
        reconstructed_train_tables_info = TrainTablesInfo(*deserialised)
        # Assert
        self.assertEqual(train_tables_info, reconstructed_train_tables_info)
